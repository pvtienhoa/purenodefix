{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../launcher.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA4B;AAC5B,yCAA4H;AAC5H,+CAAuD;AAEvD,MAAM,UAAU,GAAG,IAAI,kCAAsB,CAAC,yBAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAA;AAEnF,MAAsB,QAAQ;IAG1B,YAAsB,SAAiB;QACnC,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QAC3C,IAAI,IAAI,GAAG,SAAS,CAAA;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,CAAA;QAClC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;IAElC,CAAC;IAIM,GAAG;QACN,OAAO,IAAI,OAAO,CAAM,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YACvC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;YAC1B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAC3B,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBACnB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBACtB,MAAM,EAAE,CAAA;YACZ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBAClB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBACf,MAAM,CAAC,CAAC,CAAC,CAAA;YACb,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IACa,KAAK;;YACf,MAAM,iBAAiB,GAAG,eAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YAC5D,MAAM,YAAY,GAAG,MACjB,sBAAU,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,6BAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAA;YACvF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;YACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAelC,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YACnD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACjC,CAAC;KAAA;CACJ;AAlDD,4BAkDC","sourcesContent":["import * as path from 'path'\r\nimport { JsFixWinstonLogFactory, WinstonLogger, IJsFixConfig, IJsFixLogger, SessionMsgFactory, makeConfig } from 'jspurefix'\r\nimport { Common, IAppConfig } from './MDCapture/common'\r\nimport { EventEmitter } from 'events';\r\nconst logFactory = new JsFixWinstonLogFactory(WinstonLogger.consoleOptions('info'))\r\n\r\nexport abstract class Launcher {\r\n    protected appConfig: IAppConfig\r\n    private readonly logger: IJsFixLogger\r\n    protected constructor(appConfig: string) {\r\n        this.logger = logFactory.logger('launcher')\r\n        var root = __dirname\r\n        const init = path.join(root, appConfig)\r\n        this.logger.info(`init = ${init}`)\r\n        this.appConfig = require(init)\r\n        //this.appConfig.AvgTerm = 5\r\n    }\r\n\r\n    protected abstract getInitiator(fConfig: IJsFixConfig): Promise<any>\r\n\r\n    public run() {\r\n        return new Promise<any>((accept, reject) => {\r\n            const logger = this.logger\r\n            logger.info('launching ..')\r\n            this.setup().then(() => {\r\n                logger.info('.. done')\r\n                accept()\r\n            }).catch((e: Error) => {\r\n                logger.error(e)\r\n                reject(e)\r\n            })\r\n        })\r\n    }\r\n    private async setup() {\r\n        const clientDescription = Common.makeFConfig(this.appConfig)//require(path.join(root, this.initiatorConfig))\r\n        const clientConfig = await\r\n            makeConfig(clientDescription, logFactory, new SessionMsgFactory(clientDescription))\r\n        this.logger.info('create initiator')\r\n        this.logger.info('launching ....')\r\n        // var failedAttemp = 0\r\n        // while (failedAttemp < this.appConfig.FMaxFailAttempNo) {\r\n        //     try {\r\n        //         var client = await this.getInitiator(clientConfig)\r\n        //         failedAttemp = 0;\r\n        //         this.logger.warning(`Connection Stopped, try reconnecting after 10 sec...`);\r\n        //     } catch (error) {\r\n        //         this.logger.warning(`Connect error, try reconnecting after 10 sec ... attemp: ${failedAttemp}/${this.appConfig.FMaxFailAttempNo}`);\r\n        //         failedAttemp++;\r\n        //     } finally {\r\n        //         await Common.delay(10000);\r\n        //     }\r\n        // }\r\n        // return client;\r\n        var client = await this.getInitiator(clientConfig);\r\n        return Promise.all([client]);\r\n    }\r\n}"]}