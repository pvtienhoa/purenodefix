{"version":3,"file":"app.js","sourceRoot":"","sources":["../../MDCapture/app.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2DAAsD;AACtD,yCAAmD;AACnD,0CAAsC;AAGtC,qCAAkC;AAClC,6BAA4B;AAE5B,MAAM,eAAgB,SAAQ,mBAAQ;IACpC;QACE,KAAK,CACH,kBAAkB,CAAC,CAAA;IACvB,CAAC;IACS,YAAY,CAAC,MAAoB;QACzC,OAAO,qBAAS,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,oCAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAA;IAC9E,CAAC;CACF;AAED,CAAC,GAAS,EAAE;IACV,IAAI,IAAI,GAAG,SAAS,CAAA;IACpB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAA;IAChD,MAAM,SAAS,GAAG,eAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAK7C,IAAI,YAAY,GAAG,CAAC,CAAA;IACpB,OAAO,YAAY,GAAG,SAAS,CAAC,gBAAgB,EAAE;QAChD,IAAI;YACF,IAAI,CAAC,GAAG,IAAI,eAAe,EAAE,CAAC;YAC9B,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;YACd,YAAY,GAAG,CAAC,CAAC;YACjB,CAAC,GAAG,IAAI,CAAC;SAEV;QAAC,OAAO,KAAK,EAAE;YAEd,YAAY,EAAE,CAAC;SAChB;gBAAS;YACR,MAAM,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC3B;KACF;AACH,CAAC,CAAA,CAAC,EAAE,CAAC","sourcesContent":["import { MarketDataClient } from './marketdata-client'\r\nimport { IJsFixConfig, initiator } from 'jspurefix'\r\nimport { Launcher } from '../launcher'\r\nimport { EventEmitter } from 'events';\r\nimport { resolve } from 'path';\r\nimport { Common } from './common';\r\nimport * as path from 'path'\r\n\r\nclass AppNfixLauncher extends Launcher {\r\n  public constructor() {\r\n    super(\r\n      './../config.json')\r\n  }\r\n  protected getInitiator(config: IJsFixConfig): Promise<any> {\r\n    return initiator(config, c => new MarketDataClient(c, this.appConfig), 5000)\r\n  }\r\n}\r\n\r\n(async () => {\r\n  var root = __dirname\r\n  const init = path.join(root, './../config.json')\r\n  const appConfig = Common.loadAppConfig(init);\r\n  // l.run().then(() => {\r\n  //   console.log('finished.')\r\n  // });\r\n\r\n  var failedAttemp = 0\r\n  while (failedAttemp < appConfig.FMaxFailAttempNo) {\r\n    try {\r\n      var l = new AppNfixLauncher();\r\n      await l.run();\r\n      failedAttemp = 0;\r\n      l = null;\r\n      // this.logger.warning(`Connection Stopped, try reconnecting after 10 sec...`);\r\n    } catch (error) {\r\n      // this.logger.warning(`Connect error, try reconnecting after 10 sec ... attemp: ${failedAttemp}/${appConfig.FMaxFailAttempNo}`);\r\n      failedAttemp++;\r\n    } finally {\r\n      await Common.delay(10000);\r\n    }\r\n  }\r\n})();\r\n// const l = new AppNfixLauncher()\r\n\r\n\r\n\r\n// setInterval(async () => {\r\n//   await l.run()\r\n// },5000)"]}