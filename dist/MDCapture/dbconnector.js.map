{"version":3,"file":"dbconnector.js","sourceRoot":"","sources":["../../MDCapture/dbconnector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mariadb from 'mariadb'\r\nimport { JsFixWinstonLogFactory, WinstonLogger, IJsFixConfig, IJsFixLogger, SessionMsgFactory, makeConfig, JsFixLoggerFactory, Dictionary } from 'jspurefix'\r\nimport { IAppConfig, Common } from './common'\r\nimport { ILiveQuotes } from './marketdata-factory'\r\nimport { AvgSpread } from './AvgSpread'\r\nimport { ILiveQuote, IAverageSpread } from './LiveQuote';\r\n\r\nexport class DBConnector {\r\n    private readonly options: IAppConfig\r\n    private readonly pool: any\r\n    private readonly logger: IJsFixLogger\r\n\r\n    constructor(opt: IAppConfig, logFactory: JsFixLoggerFactory) {\r\n        this.logger = logFactory.logger('dbconnector')\r\n        this.options = opt;\r\n        debugger\r\n        if (this.options.DBHost) {\r\n            this.pool = mariadb.createPool({\r\n                host: this.options.DBHost,\r\n                user: this.options.DBUserName,\r\n                password: this.options.DBPassword,\r\n                database: this.options.DBDatabase,\r\n                connectionLimit: 20\r\n            });\r\n        } else {\r\n            this.pool = mariadb.createPool({\r\n                socketPath: this.options.DBSocketPath,\r\n                user: this.options.DBUserName,\r\n                password: this.options.DBPassword,\r\n                database: this.options.DBDatabase,\r\n                connectionLimit: 20\r\n            });\r\n        }\r\n\r\n    }\r\n    public async querySymbols(): Promise<any[]> {\r\n        const rows: any[] = await this.pool.query(`Select * From ${this.options.TblSymbols} Where LiveQuotes = ?`, [1]);\r\n        if (rows) {\r\n            return rows;\r\n        }\r\n        else {\r\n            this.logger.error(new Error('Cannot get Rows!'));\r\n            return undefined;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * queryLastAvgSpread\r\n     */\r\n    public async queryLastAvgSpreads(): Promise<Dictionary<AvgSpread>> {\r\n        const conn = await this.pool.getConnection();\r\n        const rows: any[] = await conn.query(`WITH ranked_rows AS (SELECT r.*, ROW_NUMBER() OVER (PARTITION BY Symbol ORDER BY ID DESC) AS rn FROM AverageSpreads AS r) SELECT * FROM ranked_rows WHERE rn = 1`);\r\n        conn.end();\r\n        if (rows) {\r\n            var ret = new Dictionary<AvgSpread>();\r\n            rows.forEach(row => {\r\n                let a = new AvgSpread(row.BrokerName, row.Symbol)\r\n                a.lastAvg = row.AvgSpread\r\n                ret.addUpdate(a.symbol, a)\r\n            })\r\n            return ret;\r\n        }\r\n        else {\r\n            this.logger.error(new Error('Cannot get Rows!'));\r\n            return undefined;\r\n        };\r\n    }\r\n\r\n    // public async updateLiveQuotes(lq: ILiveQuotes) {\r\n    //     try {\r\n    //         //common.showNotify('Trying to update Live Quotes');\r\n    //         //console.log(msgObj);\r\n    //         const conn = await this.pool.getConnection();\r\n    //         await conn.query(`\r\n    //     UPDATE ${this.options.TblLiveQuotes} SET \r\n    //         TimeStamp = ?, \r\n    //         BrokerName = ?, \r\n    //         Bid = ?, \r\n    //         Ask = ?, \r\n    //         Spread = ?  \r\n    //     WHERE Symbol = ?;`,\r\n    //             [(lq.TimeStamp) ? Common.getTimeStamp(lq.TimeStamp) : 'TimeStamp',\r\n    //             lq.BrokerName,\r\n    //             (lq.Bid) ? lq.Bid : 'Bid',\r\n    //             (lq.Ask) ? lq.Ask : 'Ask',\r\n    //             lq.Spread,\r\n    //             lq.Symbol]);\r\n    //         conn.end();\r\n    //     } catch (err) {\r\n    //         this.logger.error(err);\r\n    //     }\r\n    // }\r\n\r\n    public async updateLiveQuotes(lqs: ILiveQuote[]) {\r\n        try {\r\n            if (this.pool.idleConnections() <= 1) {\r\n                this.logger.warning('No idle Connection... Skipped writing to DB!')\r\n                return;\r\n            }\r\n            var lqParams: any[] = [];\r\n            lqs.forEach(lq => {\r\n                if (lq.lqFlag) {\r\n                    lqParams.push([Common.getTimeStamp(lq.timeStamp), this.options.FBrokerName, lq.bid, lq.ask, lq.spread, lq.symbol])\r\n                }\r\n            })\r\n            if (lqParams.length > 0) {\r\n                await this.pool.batch(`\r\n                UPDATE ${this.options.TblLiveQuotes} SET \r\n                    TimeStamp = ?, \r\n                    BrokerName = ?, \r\n                    Bid = ?, \r\n                    Ask = ?, \r\n                    Spread = ?  \r\n                WHERE Symbol = ?;`, lqParams);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(new Error('error updating LQ into DB - ' + error.toString()))\r\n        }\r\n    }\r\n\r\n    // async insertAvg(spreadAvg: AvgSpread[]) {\r\n    //     try {\r\n    //         //this.logger.info('Trying to insert average Quotes');\r\n    //         const conn = await this.pool.getConnection();\r\n    //         spreadAvg.forEach(avg => {\r\n    //             avg.calculate();\r\n    //             conn.query(`INSERT INTO ${this.options.TblAverageSpreads}(TimeStamp, Duration, BrokerName, Symbol, AvgSpread) VALUES (?, ?, ?, ?, ?)`, [Common.getTimeStamp(), this.options.AvgTerm, this.options.FBrokerName, avg.symbol, avg.avgSpread]);\r\n    //             avg.reset();\r\n    //         });\r\n    //         conn.end();\r\n    //     } catch (err) {\r\n    //         this.logger.error(new Error(\"not connected due to error: \" + err));\r\n    //     }\r\n    // }\r\n    async insertAvgSpreads(avgSpreads: IAverageSpread[]) {\r\n        try {\r\n            if (!this.pool.idleConnections()) {\r\n                this.logger.warning('No idle Connection... Skipped writing to DB!')\r\n                return;\r\n            }\r\n            var aqParams: any[] = [];\r\n            avgSpreads.forEach(avg => {\r\n                if (avg.avgFlag) {\r\n                    avg.avgCalc();\r\n                    aqParams.push([Common.getTimeStamp(), this.options.AvgTerm, this.options.FBrokerName, avg.symbol, avg.avgSpread]);\r\n                    // conn.query(`INSERT INTO ${this.options.TblAverageSpreads}(TimeStamp, Duration, BrokerName, Symbol, AvgSpread) VALUES (?, ?, ?, ?, ?)`, [Common.getTimeStamp(), this.options.AvgTerm, this.options.FBrokerName, avg.symbol, avg.avgSpread]);\r\n                    avg.reset();\r\n                }\r\n            });\r\n            await this.pool.batch(`INSERT INTO ${this.options.TblAverageSpreads}(TimeStamp, Duration, BrokerName, Symbol, AvgSpread) VALUES (?, ?, ?, ?, ?)`, aqParams);\r\n        } catch (err) {\r\n            this.logger.error(new Error(\"Error insertig AvgSpreads to DB - \" + err));\r\n        }\r\n    }\r\n}"]}