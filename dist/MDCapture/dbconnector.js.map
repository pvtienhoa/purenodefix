{"version":3,"file":"dbconnector.js","sourceRoot":"","sources":["../../MDCapture/dbconnector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mariadb from 'mariadb'\r\nimport { JsFixWinstonLogFactory, WinstonLogger, IJsFixConfig, IJsFixLogger, SessionMsgFactory, makeConfig, JsFixLoggerFactory, Dictionary } from 'jspurefix'\r\nimport { IAppConfig, Common } from './common'\r\nimport { ILiveQuotes } from './marketdata-factory'\r\nimport { ILiveQuote, IAverageSpread } from './LiveQuote';\r\nimport { promises } from 'fs';\r\n\r\nexport class DBConnector {\r\n    private readonly options: IAppConfig\r\n    private readonly pool: any\r\n    private readonly logger: IJsFixLogger\r\n\r\n    constructor(opt: IAppConfig, logFactory: JsFixLoggerFactory) {\r\n        this.logger = logFactory.logger('dbconnector')\r\n        this.options = opt;\r\n        debugger\r\n        if (this.options.DBHost) {\r\n            this.pool = mariadb.createPool({\r\n                host: this.options.DBHost,\r\n                user: this.options.DBUserName,\r\n                password: this.options.DBPassword,\r\n                database: this.options.DBDatabase,\r\n                connectionLimit: 20\r\n            });\r\n        } else {\r\n            this.pool = mariadb.createPool({\r\n                socketPath: this.options.DBSocketPath,\r\n                user: this.options.DBUserName,\r\n                password: this.options.DBPassword,\r\n                database: this.options.DBDatabase,\r\n                connectionLimit: 20\r\n            });\r\n        }\r\n\r\n    }\r\n    public async querySymbols(): Promise<any[]> {\r\n        const rows: any[] = await this.pool.query(`Select * From ${this.options.TblSymbols} Where LiveQuotes = ?`, [1]);\r\n        if (rows) {\r\n            return rows;\r\n        }\r\n        else {\r\n            this.logger.error(new Error('Cannot get Rows!'));\r\n            return undefined;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * queryLastAvgSpread\r\n     */\r\n    // public async queryLastAvgSpreads(): Promise<Dictionary<AvgSpread>> {\r\n    //     const conn = await this.pool.getConnection();\r\n    //     const rows: any[] = await conn.query(`WITH ranked_rows AS (SELECT r.*, ROW_NUMBER() OVER (PARTITION BY Symbol ORDER BY ID DESC) AS rn FROM AverageSpreads AS r) SELECT * FROM ranked_rows WHERE rn = 1`);\r\n    //     conn.end();\r\n    //     if (rows) {\r\n    //         var ret = new Dictionary<AvgSpread>();\r\n    //         rows.forEach(row => {\r\n    //             let a = new AvgSpread(row.BrokerName, row.Symbol)\r\n    //             a.lastAvg = row.AvgSpread\r\n    //             ret.addUpdate(a.symbol, a)\r\n    //         })\r\n    //         return ret;\r\n    //     }\r\n    //     else {\r\n    //         this.logger.error(new Error('Cannot get Rows!'));\r\n    //         return undefined;\r\n    //     };\r\n    // }\r\n\r\n    public async updateLiveQuotes(lqs: ILiveQuote[]) {\r\n        return new Promise<boolean>((accept, reject) => {\r\n            if (this.pool.idleConnections() <= 1) {\r\n                this.logger.warning('No idle Connection... Skipped writing to DB!')\r\n                accept(false);\r\n            }\r\n            var lqParams: any[] = [];\r\n            lqs.forEach(lq => {\r\n                if (lq.lqFlag) {\r\n                    lqParams.push([Common.getTimeStamp(lq.timeStamp), this.options.FBrokerName, lq.bid, lq.ask, Common.roundToFixed(lq.spread,1), lq.symbol])\r\n                }\r\n            })\r\n            if (lqParams.length > 0) {\r\n                this.pool.batch(`\r\n                UPDATE ${this.options.TblLiveQuotes} SET \r\n                    TimeStamp = ?, \r\n                    BrokerName = ?, \r\n                    Bid = ?, \r\n                    Ask = ?, \r\n                    Spread = ?  \r\n                WHERE Symbol = ?;`, lqParams).then(\r\n                    accept(true)\r\n                ).catch((err: Error) => {\r\n                    this.logger.error(new Error('error updating LQ into DB - ' + err.message))\r\n                    reject(err);\r\n                });\r\n            }\r\n            else accept(false);\r\n        })\r\n    }\r\n    async insertAvgSpreads(avgSpreads: IAverageSpread[]) {\r\n        return new Promise<boolean>((accept, reject) => {\r\n            if (!this.pool.idleConnections()) {\r\n                this.logger.warning('No idle Connection... Skipped writing to DB!')\r\n                accept(false);\r\n            }\r\n            var aqParams: any[] = [];\r\n            avgSpreads.forEach(avg => {\r\n                if (avg.avgFlag) {\r\n                    avg.avgCalc();\r\n                    aqParams.push([Common.getTimeStamp(), this.options.AvgTerm*60, this.options.FBrokerName, avg.symbol, avg.avgSpread]);\r\n                    //avg.reset();\r\n                }\r\n            });\r\n            if (aqParams.length > 0) {\r\n                this.pool.batch(`INSERT INTO ${this.options.TblAverageSpreads}(TimeStamp, Duration, BrokerName, Symbol, AvgSpread) VALUES (?, ?, ?, ?, ?)`, aqParams).then(\r\n                    accept(true)\r\n                ).catch((err: Error) => {\r\n                    this.logger.error(new Error('error updating AQ into DB - ' + err.message))\r\n                    reject(err);\r\n                });\r\n            }\r\n            else accept(false);\r\n        })\r\n    }\r\n}"]}