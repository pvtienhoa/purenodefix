{"version":3,"file":"common.js","sourceRoot":"","sources":["../../MDCapture/common.ts"],"names":[],"mappings":"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","sourcesContent":["import * as moment from 'moment-timezone'\r\nimport * as fs from 'fs'\r\nimport * as util from 'util'\r\n\r\nexport enum SubscriptionRequestType {\r\n\r\n}\r\n\r\nexport interface IAppConfig {\r\n  Host: string\r\n  Port: number\r\n  SenderID: string\r\n  TargetID: string\r\n  TargetSubID?: string\r\n  UserName: string\r\n  Password: string\r\n  MsgType: string\r\n  Broker: string\r\n  NoMsgResetTimeout: number\r\n  MaxAttempts: number\r\n  DBHost: string\r\n  DBName: string\r\n  DBUserName: string\r\n  DBPassword: string\r\n  DBSocketPath: string\r\n  DBLimitConn: number\r\n  TblSymbols: string\r\n  TblLiveQuotes: string\r\n  TblAverageSpreads: string\r\n  AvgTerm: number\r\n  TimeZone: string\r\n  LogDays: number\r\n}\r\nexport class Common {\r\n  public static getTimeStamp(timeZone: string, timeStamp?: Date, formatStr: string = 'YYYYMMDD-HH:mm:ss.SSS'): string {\r\n    if (timeStamp) return moment(timeStamp, formatStr).tz(timeZone).format(\"YYYYMMDDHHmmssSSS\")\r\n    else return moment().tz(timeZone).format(\"YYYYMMDDHHmmssSSS\");\r\n  }\r\n\r\n  public static roundToFixed(num: number, scale: number = 5): number {\r\n    if (!(\"\" + num).includes(\"e\")) {\r\n      return +(Math.round(+(num + \"e+\" + scale)) + \"e-\" + scale);\r\n    } else {\r\n      var arr = (\"\" + num).split(\"e\");\r\n      var sig = \"\"\r\n      if (+arr[1] + scale > 0) {\r\n        sig = \"+\";\r\n      }\r\n      return +(Math.round(+(+arr[0] + \"e\" + sig + (+arr[1] + scale))) + \"e-\" + scale);\r\n    }\r\n  }\r\n\r\n  public static loadAppConfig(path: string): IAppConfig {\r\n    return require(path)\r\n  }\r\n\r\n  public static makeFConfig(appConfig: IAppConfig): any {\r\n    return {\r\n      \"application\": {\r\n        \"reconnectSeconds\": 10,\r\n        \"type\": \"initiator\",\r\n        \"name\": appConfig.Broker,\r\n        \"tcp\": {\r\n          \"host\": appConfig.Host,\r\n          \"port\": appConfig.Port\r\n        },\r\n        \"protocol\": \"ascii\",\r\n        \"dictionary\": \"repo44\"\r\n      },\r\n      \"Username\": appConfig.UserName,\r\n      \"Password\": appConfig.Password,\r\n      \"EncryptMethod\": 0,\r\n      \"ResetSeqNumFlag\": true,\r\n      \"HeartBtInt\": 30,\r\n      \"SenderCompId\": appConfig.SenderID,\r\n      \"TargetCompID\": appConfig.TargetID,\r\n      // \"TargetSubID\": appConfig.FTargetSubID,\r\n      \"BeginString\": appConfig.MsgType\r\n    }\r\n  }\r\n\r\n  public static delay(p: number): Promise<any> {\r\n    return new Promise<any>((accept) => {\r\n      if (!p) {\r\n        accept()\r\n      }\r\n      setTimeout(() => {\r\n        accept()\r\n      }, p)\r\n    })\r\n  }\r\n\r\n  public static objToString(obj: object): string {\r\n    return util.inspect(obj, false, null, true /* enable colors */);\r\n  }\r\n\r\n  public static startInterval(fn: Function, ms: number): number {\r\n    return setInterval(fn, ms);\r\n  }\r\n}\r\n"]}