{"version":3,"file":"marketdata-client.1.js","sourceRoot":"","sources":["../../MDCapture/marketdata-client.1.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    AsciiSession,\r\n    MsgView,\r\n    IJsFixConfig,\r\n    IJsFixLogger,\r\n    Dictionary,\r\n    MsgType\r\n} from 'jspurefix'\r\nimport * as cron from 'node-cron'\r\nimport {\r\n    IMarketDataRequest,\r\n    ISecurityListRequest\r\n} from 'jspurefix/dist/types/FIX4.4/repo'\r\nimport { MarketDataFactory } from './marketdata-factory'\r\nimport { AvgSpread } from './AvgSpread';\r\nimport { DBConnector } from './dbconnector';\r\nimport { IAppConfig } from './common';\r\nimport { EventEmitter } from 'events';\r\nimport LiveQuote from './LiveQuote'\r\nimport { SubscriptionRequestType } from 'jspurefix/dist/types/FIX4.4/repo';\r\n\r\n\r\nexport class MarketDataClient extends AsciiSession {\r\n    private readonly logger: IJsFixLogger\r\n    private readonly fixLog: IJsFixLogger\r\n    private avgSpreads: Dictionary<AvgSpread>\r\n    private dbConnector: DBConnector\r\n    private cronJob: any\r\n    private msgCount: number\r\n    constructor(public readonly config: IJsFixConfig, private readonly appConfig: IAppConfig) {\r\n        super(config)\r\n        this.logReceivedMsgs = true\r\n        this.fixLog = config.logFactory.plain(`jsfix.${config!.description!.application!.name}.log`)\r\n        this.logger = config.logFactory.logger(`${this.me}:MarketDataClient`)\r\n        this.dbConnector = new DBConnector(this.appConfig, config.logFactory);\r\n        this.avgSpreads = new Dictionary<AvgSpread>()\r\n        this.cronJob = cron.schedule(`*/${appConfig.AvgTerm} * * * *`, () => {\r\n            //cron.schedule(`*/${appConfig.AvgTerm}  * * * *`, () => {\r\n            this.logger.info(`inserting AVGSpreads...`)\r\n            // this.avgSpreads.values().forEach(a => {\r\n            //     a.calculate()\r\n            //     this.logger.info(a.avgSpread.toString())\r\n            //     a.reset()\r\n            // })\r\n            this.dbConnector.insertAvg(this.avgSpreads.values())\r\n        }, { scheduled: false })\r\n        this.msgCount = 0        \r\n    }\r\n\r\n    // onApp Event Listener\r\n    protected onApplicationMsg(msgType: string, view: MsgView): void {\r\n        //this.logger.debug(`${view.toJson()}`)\r\n        switch (msgType) {\r\n            case MsgType.MarketDataSnapshotFullRefresh:\r\n            case MsgType.MarketDataIncrementalRefresh: {\r\n                this.msgCount++\r\n                let lq = MarketDataFactory.parseLiveQuote(msgType, view)\r\n                // this.logger.info(`Symbol = ${lq.Symbol}\\n\r\n                // Ask = ${lq.Ask} \\n\r\n                // Bid = ${lq.Bid}\\n\r\n                // Spread = ${lq.Spread}\\n\r\n                // TimeStamp = ${lq.TimeStamp}\\n\r\n                // fpoint = ${lq.fpoint}`)\r\n                this.dbConnector.updateLiveQuotes(lq)\r\n                let a = this.avgSpreads.get(lq.Symbol)\r\n                if (a) a.addSum(lq.Spread)\r\n                else {\r\n                    a = new AvgSpread(this.appConfig.FBrokerName, lq.Symbol)\r\n                    a.addSum(lq.Spread)\r\n                }\r\n                this.avgSpreads.addUpdate(a.symbol, a)\r\n                break\r\n            }\r\n            case MsgType.SecurityList: {\r\n                this.logger.info('Security List received!')\r\n                //this.done();\r\n            }\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    // onStop Event Listener\r\n    protected onStopped(): void {\r\n        this.logger.info('Stopped!')\r\n\r\n        this.cronJob.stop();\r\n    }\r\n\r\n    // use msgType for example to persist only trade capture messages to database\r\n    protected onDecoded(msgType: string, txt: string): void {\r\n        this.fixLog.info(txt)\r\n    }\r\n\r\n    // no delimiter substitution on transmit messages\r\n    protected onEncoded(msgType: string, txt: string): void {\r\n        this.fixLog.info(AsciiSession.asPiped(txt))\r\n    }\r\n\r\n    // onReady Event Listener\r\n    protected onReady(view: MsgView): void {\r\n        this.logger.info('ready')\r\n\r\n        // Send Test msg to Server\r\n        // this.logger.info('send test message...')\r\n        // const t: ITestRequest = MarketDataFactory.createTestRequest(this.appConfig.BrokerName)\r\n        // this.send(MsgType.TestRequest,t)\r\n\r\n        // Query Symbol list from server\r\n        // this.logger.info('query symbol list from server...')\r\n        // const slr: ISecurityListRequest = MarketDataFactory.createSecurityListRequest(this.appConfig.BrokerName,SecurityListRequestType.AllSecurities)\r\n        // this.send(MsgType.SecurityListRequest,slr)\r\n\r\n        // Send MD Request to server\r\n        this.dbConnector.querySymbols().then(symbols => {            \r\n            const mdr: IMarketDataRequest = MarketDataFactory.createMarketDataRequest(this.appConfig.FBrokerName, SubscriptionRequestType.SnapshotAndUpdates, symbols)\r\n            this.send(MsgType.MarketDataRequest, mdr)\r\n            //Start Cron-Job\r\n            this.cronJob.start()\r\n        })\r\n        // let symbols = ['AUD/CAD','AUD/CHF','AUD/JPY','AUD/NZD','AUD/USD','CAD/CHF','CAD/JPY','CHF/JPY','EUR/AUD','EUR/CAD','EUR/CHF','EUR/GBP','EUR/JPY','EUR/USD']\r\n        // const mdr: IMarketDataRequest = MarketDataFactory.createMarketDataRequest(this.appConfig.BrokerName, SubscriptionRequestType.SnapshotAndUpdates, symbols)\r\n        // this.send(MsgType.MarketDataRequest, mdr)\r\n        // this.cronJob.start()\r\n        process.on('SIGINT', function () {\r\n            console.log(\"Caught interrupt signal\");\r\n            console.log(`Total Mesages Received: ${this.msgCount}`)\r\n            this.done();\r\n            process.exit()\r\n        });\r\n    }\r\n\r\n    // onLogon Event Listener\r\n    protected onLogon(view: MsgView, user: string, password: string): boolean {\r\n        this.logger.info(`peer logs in user ${user}`)\r\n        return true\r\n    }\r\n}"]}