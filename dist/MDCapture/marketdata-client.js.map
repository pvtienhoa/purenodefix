{"version":3,"file":"marketdata-client.js","sourceRoot":"","sources":["../../MDCapture/marketdata-client.ts"],"names":[],"mappings":";;AAAA,yCAYkB;AAClB,kCAAiC;AACjC,2DAKyC;AACzC,6DAAwD;AAExD,+CAA4C;AAG5C,2CAAuC;AACvC,2DAA2E;AAC3E,iCAAgC;AAGhC,MAAa,gBAAiB,SAAQ,wBAAY;IAY9C,YAA4B,MAAoB,EAAmB,SAAqB;QACpF,KAAK,CAAC,MAAM,CAAC,CAAC;QADU,WAAM,GAAN,MAAM,CAAc;QAAmB,cAAS,GAAT,SAAS,CAAY;QAEpF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,WAAW,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QACzL,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,QAAQ,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QACnL,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACtE,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAU,EAAa,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,OAAO,UAAU,EAAE,GAAG,EAAE;YAC/E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAA;YAC3C,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW;gBAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;QACzG,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;YACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACzC,IAAI,CAAC,IAAI,EAAE,CAAA;QACf,CAAC,EAAE;YACK,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,SAAS;SACtB,CAAC,CAAC;IACX,CAAC;IAGS,gBAAgB,CAAC,OAAe,EAAE,IAAa;QAErD,QAAQ,OAAO,EAAE;YACb,KAAK,mBAAO,CAAC,SAAS;gBAClB,IAAI,GAA8B,CAAA;gBAClC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAM,CAAC,OAAO,CAAC,CAAC;gBAC7C,IAAI,OAAO;oBAAE,GAAG,GAAG,sCAAiB,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;gBAC7E,IAAI,CAAC,IAAI,CAAC,mBAAO,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;YACrD,KAAK,mBAAO,CAAC,6BAA6B,CAAC;YAC3C,KAAK,mBAAO,CAAC,4BAA4B,CAAC,CAAC;gBACvC,IAAI,CAAC,QAAQ,EAAE,CAAA;gBACf,IAAI,GAAG,GAAG,sCAAiB,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,GAAG,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBAE/D,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACZ,IAAI,UAAqB,CAAA;oBACzB,IAAI,CAAC,CAAC,MAAM;wBAAE,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;;wBACnD,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,CAAC,CAAA;oBACzE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACrB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBAC7D,CAAC,CAAC,CAAC;gBACH,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACzC,MAAK;aACR;YACD,KAAK,mBAAO,CAAC,YAAY,CAAC,CAAC;gBACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAA;aAE9C;YACD;gBACI,MAAK;SACZ;IACL,CAAC;IAGS,SAAS;QACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7B,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;QAGnC,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,CAAC;QACtC,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;IACzC,CAAC;IAGS,SAAS,CAAC,OAAe,EAAE,GAAW;QAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAGS,SAAS,CAAC,OAAe,EAAE,GAAW;QAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;IAC/C,CAAC;IAGS,OAAO,CAAC,IAAa;QAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAY/B,IAAI;YACA,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC3C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iCAAiC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAA;gBAErE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBAChB,IAAI,CAAC,GAAG,IAAI,qBAAS,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;oBAClG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;oBAGjD,IAAI,GAAG,GAAuB,sCAAiB,CAAC,uBAAuB,CAAC,CAAC,CAAC,KAAK,EAAE,8BAAuB,CAAC,kBAAkB,EAAE,CAAC,CAAC,MAAM,EAAE,mBAAY,CAAC,kBAAkB,CAAC,CAAC;oBAGxK,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;oBAClG,IAAI,CAAC,IAAI,CAAC,mBAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAA;gBAC7C,CAAC,CAAC,CAAC;gBAGH,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;gBACpC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;gBAChE,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;gBACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;gBAE3D,WAAW,CAAC,GAAG,EAAE;oBACb,IAAI,IAAI,CAAC,QAAQ;wBAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;;wBAC9C,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;wBACpE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,4BAA4B,IAAI,CAAC,SAAS,CAAC,kBAAkB,wBAAwB,CAAC,CAAC;wBAC1G,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,IAAI,CAAC,SAAS,CAAC,kBAAkB,wBAAwB,CAAC,CAAC;wBACxG,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBACvC,IAAI,CAAC,IAAI,EAAE,CAAC;qBACf;oBAED,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK,wBAAY,CAAC,YAAY,EAAE;wBAE9F,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;6BACtD,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;4BACV,IAAI,GAAG;gCAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;wBACpD,CAAC,CAAC;6BACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;4BACX,MAAM,GAAG,CAAC;wBACd,CAAC,CAAC,CAAC;wBACP,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;4BAClC,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC;4BAClB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;wBAC7C,CAAC,CAAC,CAAC;qBACN;gBACL,CAAC,EAAE,GAAG,CAAC,CAAC;gBACR,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;YACxE,CAAC,CAAC,CAAA;SACL;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC5B;QAMD,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;YACjB,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,OAAO,CAAC,GAAG,CAAC,2BAA2B,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;YACvD,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO,CAAC,IAAI,EAAE,CAAA;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAGS,OAAO,CAAC,IAAa,EAAE,IAAY,EAAE,QAAgB;QAC3D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAA;QAC7C,OAAO,IAAI,CAAA;IACf,CAAC;IAES,oBAAoB,CAAC,IAAsB;QACjD,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;IACzG,CAAC;IAES,oBAAoB,CAAC,IAAsB;QACjD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAA;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAA;QAC3C,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;IACzG,CAAC;CACJ;AAhMD,4CAgMC","sourcesContent":["import {\r\n    AsciiSession,\r\n    MsgView,\r\n    IJsFixConfig,\r\n    IJsFixLogger,\r\n    Dictionary,\r\n    MsgType,\r\n    SessionState,\r\n    FixSessionState,\r\n    MsgTransport,\r\n    Tags,\r\n    MsgTag\r\n} from 'jspurefix'\r\nimport * as cron from 'node-cron'\r\nimport {\r\n    IMarketDataRequest,\r\n    ISecurityListRequest,\r\n    IMassQuoteAcknowledgement,\r\n    MDUpdateType\r\n} from 'jspurefix/dist/types/FIX4.4/repo'\r\nimport { MarketDataFactory } from './marketdata-factory'\r\nimport { AvgSpread } from './AvgSpread';\r\nimport { DBConnector } from './dbconnector';\r\nimport { IAppConfig, Common } from './common';\r\nimport { EventEmitter } from 'events';\r\nimport { LiveQuote } from './LiveQuote'\r\nimport { SubscriptionRequestType } from 'jspurefix/dist/types/FIX4.4/repo';\r\nimport * as moment from 'moment'\r\n\r\n\r\nexport class MarketDataClient extends AsciiSession {\r\n    private readonly logger: IJsFixLogger\r\n    private readonly fixLog: IJsFixLogger\r\n    private readonly eventLog: IJsFixLogger\r\n    private liveQuotes: Dictionary<LiveQuote>\r\n    private dbConnector: DBConnector\r\n    private InsertAvgSpreadCronJob: cron.ScheduledTask\r\n    private dailyReconnectCronJob: cron.ScheduledTask\r\n    private msgCount: number\r\n    private isIdling: boolean\r\n    private idleDuration: moment.Duration\r\n    private tmpTrans: MsgTransport\r\n    constructor(public readonly config: IJsFixConfig, private readonly appConfig: IAppConfig) {\r\n        super(config);\r\n        this.logReceivedMsgs = true;\r\n        this.fixLog = config.logFactory.plain(`${this.appConfig.FMsgType}-${this.appConfig.FUserName}-${this.appConfig.FSenderID}-${this.appConfig.FTargetID}.messages`, 5 * 1024 * 1024 * 1024);\r\n        this.eventLog = config.logFactory.plain(`${this.appConfig.FMsgType}-${this.appConfig.FUserName}-${this.appConfig.FSenderID}-${this.appConfig.FTargetID}.event`, 100 * 1024 * 1024);\r\n        this.logger = config.logFactory.logger(`${this.me}:MDClient`);\r\n        this.dbConnector = new DBConnector(this.appConfig, config.logFactory);\r\n        this.liveQuotes = new Dictionary<LiveQuote>();\r\n        this.msgCount = 0;\r\n        this.isIdling = false;\r\n        this.idleDuration = moment.duration(0);\r\n        this.InsertAvgSpreadCronJob = cron.schedule(`*/${appConfig.AvgTerm} * * * *`, () => {\r\n            this.logger.info(`inserting AVGSpreads...`)\r\n            if (this.liveQuotes && this.dbConnector) this.dbConnector.insertAvgSpreads(this.liveQuotes.values());\r\n        }, { scheduled: false });\r\n        this.dailyReconnectCronJob = cron.schedule(`0 2 * * *`, () => {\r\n            this.logger.info(`Daily disconnected`);\r\n            this.eventLog.info(`Daily disconnected`);\r\n            this.done()\r\n        }, {\r\n                scheduled: false,\r\n                timezone: \"Etc/UTC\"\r\n            });\r\n    }\r\n\r\n    // onApp Event Listener\r\n    protected onApplicationMsg(msgType: string, view: MsgView): void {\r\n        //this.logger.debug(`${view.toJson()}`)\r\n        switch (msgType) {\r\n            case MsgType.MassQuote:\r\n                let mqa: IMassQuoteAcknowledgement\r\n                let quoteID = view.getString(MsgTag.QuoteID);\r\n                if (quoteID) mqa = MarketDataFactory.createMassQuoteAcknowledgement(quoteID);\r\n                this.send(MsgType.MassQuoteAcknowledgement, mqa);\r\n            case MsgType.MarketDataSnapshotFullRefresh:\r\n            case MsgType.MarketDataIncrementalRefresh: {\r\n                this.msgCount++\r\n                let lqs = MarketDataFactory.parseLiveQuotes(msgType, view);\r\n                if (!lqs.length) throw new Error('no LiveQuotes from Parsed!');\r\n\r\n                lqs.forEach(e => {\r\n                    let lqToUpdate: LiveQuote\r\n                    if (e.symbol) lqToUpdate = this.liveQuotes.get(e.symbol)\r\n                    else lqToUpdate = this.liveQuotes.values().find(x => x.reqID === e.reqID)\r\n                    lqToUpdate.update(e);\r\n                    this.liveQuotes.addUpdate(lqToUpdate.symbol, lqToUpdate);\r\n                });\r\n                if (this.isIdling) this.isIdling = false;\r\n                break\r\n            }\r\n            case MsgType.SecurityList: {\r\n                this.logger.info('Security List received!')\r\n                //this.done();\r\n            }\r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    // onStop Event Listener\r\n    protected onStopped(): void {\r\n        this.eventLog.info('Client stopped!');\r\n        this.logger.info('Stopped!');\r\n        this.InsertAvgSpreadCronJob.stop();\r\n\r\n\r\n        this.InsertAvgSpreadCronJob.destroy();\r\n        this.dailyReconnectCronJob.destroy();\r\n    }\r\n\r\n    // use msgType for example to persist only trade capture messages to database\r\n    protected onDecoded(msgType: string, txt: string): void {\r\n        this.fixLog.info(txt)\r\n    }\r\n\r\n    // no delimiter substitution on transmit messages\r\n    protected onEncoded(msgType: string, txt: string): void {\r\n        this.fixLog.info(AsciiSession.asPiped(txt))\r\n    }\r\n\r\n    // onReady Event Listener\r\n    protected onReady(view: MsgView): void {\r\n        this.eventLog.info('Logged on!');\r\n        this.logger.info('ready')\r\n        this.tmpTrans = this.transport;\r\n\r\n        // Send Test msg to Server\r\n        // this.logger.info('send test message...')\r\n        // const t: ITestRequest = MarketDataFactory.createTestRequest(this.appConfig.BrokerName)\r\n        // this.send(MsgType.TestRequest,t)\r\n\r\n        // Query Symbol list from server\r\n        // this.logger.info('query symbol list from server...')\r\n        // const slr: ISecurityListRequest = MarketDataFactory.createSecurityListRequest(this.appConfig.BrokerName,SecurityListRequestType.AllSecurities)\r\n        // this.send(MsgType.SecurityListRequest,slr)\r\n\r\n        try {\r\n            this.dbConnector.querySymbols().then(symbols => {\r\n                this.eventLog.info(`Symbol list accquired, count: ${symbols.length}`)\r\n                // Query data from Symbols table and create LiveQuote Dictionary\r\n                symbols.forEach(r => {\r\n                    let l = new LiveQuote(r.currencypairname, r.requestId, this.appConfig.FBrokerName, 0, 0, r.Digit);\r\n                    this.liveQuotes.addUpdate(r.currencypairname, l);\r\n\r\n                    // Create Martket Data Request with symbolist\r\n                    let mdr: IMarketDataRequest = MarketDataFactory.createMarketDataRequest(l.reqID, SubscriptionRequestType.SnapshotAndUpdates, l.symbol, MDUpdateType.IncrementalRefresh);\r\n\r\n                    // Send MD Request to server\r\n                    this.eventLog.info(`Sending MDRequest to host: ${this.appConfig.FHost}: ${this.appConfig.FPort}`);\r\n                    this.send(MsgType.MarketDataRequest, mdr)\r\n                });\r\n\r\n                //Start Cron-Jobs                \r\n                this.InsertAvgSpreadCronJob.start();\r\n                this.eventLog.info(`Cronjob for inserting AvgSpreads Started!`);\r\n                this.dailyReconnectCronJob.start();\r\n                this.eventLog.info(`Cronjob for daily Reconnect Started!`);\r\n\r\n                setInterval(() => {\r\n                    if (this.isIdling) this.idleDuration.add(200, 'ms')\r\n                    else this.idleDuration = moment.duration(0);\r\n                    this.isIdling = true;\r\n                    if (this.idleDuration.asMinutes() >= this.appConfig.FNoMsgResetTimeout) {\r\n                        this.eventLog.info(`Client has been idle for ${this.appConfig.FNoMsgResetTimeout} minutes, Reconnecting`);\r\n                        this.logger.info(`Client has been idle for ${this.appConfig.FNoMsgResetTimeout} minutes, Reconnecting`);\r\n                        this.idleDuration = moment.duration(0);\r\n                        this.done();\r\n                    }\r\n\r\n                    if (this.liveQuotes && this.dbConnector && this.sessionState.state === SessionState.PeerLoggedOn) {\r\n\r\n                        this.dbConnector.updateLiveQuotes(this.liveQuotes.values())\r\n                            .then((res) => {\r\n                                if (res) this.logger.info(`LiveQuotes Updated`);\r\n                            })\r\n                            .catch((err) => {\r\n                                throw err;\r\n                            });\r\n                        this.liveQuotes.values().forEach(lq => {\r\n                            lq.lqFlag = false;\r\n                            this.liveQuotes.addUpdate(lq.symbol, lq);\r\n                        });\r\n                    }\r\n                }, 200);\r\n                this.eventLog.info(`Interval job for updating LiveQuotes Started!`);\r\n            })\r\n        } catch (error) {\r\n            this.eventLog.error(error);\r\n            this.logger.error(error);\r\n        }\r\n\r\n        // let symbols = ['AUD/CAD','AUD/CHF','AUD/JPY','AUD/NZD','AUD/USD','CAD/CHF','CAD/JPY','CHF/JPY','EUR/AUD','EUR/CAD','EUR/CHF','EUR/GBP','EUR/JPY','EUR/USD']\r\n        // const mdr: IMarketDataRequest = MarketDataFactory.createMarketDataRequest(this.appConfig.BrokerName, SubscriptionRequestType.SnapshotAndUpdates, symbols)\r\n        // this.send(MsgType.MarketDataRequest, mdr)\r\n        // this.cronJob.start()\r\n        process.on('SIGINT', function () {\r\n            console.log(\"Caught interrupt signal\");\r\n            console.log(`Total Mesages Received: ${this.msgCount}`)\r\n            this.done();\r\n            process.exit()\r\n        });\r\n    }\r\n\r\n    // onLogon Event Listener\r\n    protected onLogon(view: MsgView, user: string, password: string): boolean {\r\n        this.eventLog.info('Tring to Log on!');\r\n        this.logger.info(`peer logs in user ${user}`)\r\n        return true\r\n    }\r\n\r\n    protected updateLiveQuotesTick(self: MarketDataClient): void {\r\n        console.log(`updating LiveQuotes...`);\r\n        if (self.liveQuotes && self.dbConnector) self.dbConnector.updateLiveQuotes(self.liveQuotes.values());\r\n    }\r\n\r\n    protected insertAvgSpreadsTick(self: MarketDataClient): void {\r\n        self.eventLog.info(`inserting AVGSpreads...`)\r\n        self.logger.info(`inserting AVGSpreads...`)\r\n        if (self.liveQuotes && self.dbConnector) self.dbConnector.insertAvgSpreads(self.liveQuotes.values());\r\n    }\r\n}"]}