{"version":3,"file":"marketdata-factory.js","sourceRoot":"","sources":["../../MDCapture/marketdata-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    SubscriptionRequestType,\r\n    MDUpdateType,\r\n    MDEntryType,\r\n    MDUpdateAction,\r\n    MDReqRejReason,\r\n    MDImplicitDelete,\r\n    IInstrument,\r\n    IMarketDataRequest,\r\n    IMarketDataSnapshotFullRefresh,\r\n    IMarketDataIncrementalRefresh,\r\n    IMarketDataRequestReject,\r\n    IInstrmtMDReqGrp,\r\n    SecurityListRequestType,\r\n    ISecurityListRequest,\r\n    ITestRequest\r\n} from 'jspurefix/dist/types/FIX4.4/repo'\r\nimport { MsgView, MsgType } from 'jspurefix';\r\nimport { lchmod } from 'fs';\r\nimport { Common } from './common';\r\nimport { ILiveQuote } from './LiveQuote';\r\n\r\nexport interface ILiveQuotes {\r\n    TimeStamp: Date;\r\n    Symbol: string;\r\n    BrokerName: string;\r\n    Bid: number;\r\n    Ask: number;\r\n    Spread: number;\r\n    SpreadAvg?: number;\r\n    fpoint?: number;\r\n}\r\n\r\n// export interface IAvegareSpread {\r\n//     TimeStamp: Date;\r\n//     Symbol: string;\r\n//     BrokerName: string;\r\n//     Duration: number;\r\n//     AvgSpread: number;\r\n// }\r\n\r\nexport class MarketDataFactory {\r\n\r\n    /**\r\n     * createMarketDataRequest\r\n     */\r\n    public static createMarketDataRequest(requestId: string, msgType: SubscriptionRequestType = SubscriptionRequestType.SnapshotAndUpdates, symbols: string[]): IMarketDataRequest {\r\n        let instruments = symbols.map(s => {\r\n            let i: IInstrument = { Symbol: s }\r\n            let g: IInstrmtMDReqGrp = { Instrument: i }\r\n            return g\r\n        })\r\n        return {\r\n            SubscriptionRequestType: msgType,\r\n            MDReqID: requestId,\r\n            MarketDepth: 0,\r\n            MDUpdateType: MDUpdateType.IncrementalRefresh,\r\n            InstrmtMDReqGrp: instruments,\r\n            MDReqGrp: [\r\n                {\r\n                    MDEntryType: MDEntryType.Bid\r\n                },\r\n                {\r\n                    MDEntryType: MDEntryType.Offer\r\n                }\r\n            ]\r\n        } as IMarketDataRequest;\r\n    }\r\n\r\n    public static createSecurityListRequest(requestId: string, msgType: SecurityListRequestType = SecurityListRequestType.Symbol): ISecurityListRequest {\r\n        return {\r\n            SecurityReqID: requestId,\r\n            SecurityListRequestType: msgType\r\n        } as ISecurityListRequest\r\n    }\r\n\r\n    public static createTestRequest(requestId: string): ITestRequest {\r\n        return {\r\n            TestReqID: requestId\r\n        } as ITestRequest\r\n    }\r\n\r\n    /**\r\n     * parseLiveQuote\r\n     */\r\n    public static parseLiveQuote(msgType: string, msgView: MsgView): ILiveQuote {\r\n        try {\r\n            switch (msgType) {\r\n                case MsgType.MarketDataSnapshotFullRefresh: {\r\n                    // create an object and cast to the interface\r\n                    const md: IMarketDataSnapshotFullRefresh = msgView.toObject()\r\n                    const b = (md.MDFullGrp.find(g => g.MDEntryType === MDEntryType.Bid)) ? md.MDFullGrp.find(g => g.MDEntryType === MDEntryType.Bid).MDEntryPx : 0\r\n                    const a = (md.MDFullGrp.find(g => g.MDEntryType === MDEntryType.Offer)) ? md.MDFullGrp.find(g => g.MDEntryType === MDEntryType.Offer).MDEntryPx : 0\r\n\r\n                    let lq: ILiveQuote = {\r\n                        timeStamp: md.StandardHeader.SendingTime,\r\n                        symbol: md.Instrument.Symbol,\r\n                        bid: b,\r\n                        ask: a\r\n                    }\r\n\r\n                    return lq\r\n                }\r\n\r\n                case MsgType.MarketDataIncrementalRefresh: {\r\n                    const md: IMarketDataIncrementalRefresh = msgView.toObject()\r\n                    const b = (md.MDIncGrp.find(g => g.MDEntryType === MDEntryType.Bid)) ? md.MDIncGrp.find(g => g.MDEntryType === MDEntryType.Bid).MDEntryPx : 0\r\n                    const a = (md.MDIncGrp.find(g => g.MDEntryType === MDEntryType.Offer)) ? md.MDIncGrp.find(g => g.MDEntryType === MDEntryType.Offer).MDEntryPx : 0\r\n\r\n                    let lq: ILiveQuote = {\r\n\r\n                        timeStamp: md.StandardHeader.SendingTime,\r\n                        symbol: md.MDIncGrp[0].Instrument.Symbol,\r\n                        bid: b,\r\n                        ask: a\r\n                    }\r\n                    return lq\r\n                }\r\n                default: {\r\n                    return undefined;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            throw new Error('Error parsing LiveQuote - ' + error);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]}